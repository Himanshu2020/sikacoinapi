"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.reset = reset;
exports.save = save;
exports.getViewKey = getViewKey;
exports.getSpendKeys = getSpendKeys;
exports.getStatus = getStatus;
exports.getAddresses = getAddresses;
exports.createAddress = createAddress;
exports.deleteAddress = deleteAddress;
exports.getBalance = getBalance;
exports.getBlockHashes = getBlockHashes;
exports.getTransactionHashes = getTransactionHashes;
exports.getTransactions = getTransactions;
exports.getUnconfirmedTransactionHashes = getUnconfirmedTransactionHashes;
exports.getTransaction = getTransaction;
exports.sendTransaction = sendTransaction;
exports.createDelayedTransaction = createDelayedTransaction;
exports.getDelayedTransactionHashes = getDelayedTransactionHashes;
exports.deleteDelayedTransaction = deleteDelayedTransaction;
exports.sendDelayedTransaction = sendDelayedTransaction;
exports.sendFusionTransaction = sendFusionTransaction;
exports.estimateFusion = estimateFusion;
var buildRPC = function buildRPC(method, id, password, params) {
  return JSON.stringify(_extends({
    jsonrpc: "2.0",
    method: method,
    id: id
  }, password && { password: password }, params && { params: params }));
};

function reset(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["reset"].concat(Array.prototype.slice.call(arguments)));
}

function save(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["save"].concat(Array.prototype.slice.call(arguments)));
}

function getViewKey(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getViewKey"].concat(Array.prototype.slice.call(arguments)));
}

function getSpendKeys(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getSpendKeys"].concat(Array.prototype.slice.call(arguments)));
}

function getStatus(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getStatus"].concat(Array.prototype.slice.call(arguments)));
}

function getAddresses(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getAddresses"].concat(Array.prototype.slice.call(arguments)));
}

function createAddress(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["createAddress"].concat(Array.prototype.slice.call(arguments)));
}

function deleteAddress(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["deleteAddress"].concat(Array.prototype.slice.call(arguments)));
}

function getBalance(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getBalance"].concat(Array.prototype.slice.call(arguments)));
}

function getBlockHashes(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getBlockHashes"].concat(Array.prototype.slice.call(arguments)));
}

function getTransactionHashes(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getTransactionHashes"].concat(Array.prototype.slice.call(arguments)));
}

function getTransactions(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getTransactions"].concat(Array.prototype.slice.call(arguments)));
}

function getUnconfirmedTransactionHashes(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getUnconfirmedTransactionHashes"].concat(Array.prototype.slice.call(arguments)));
}

function getTransaction(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getTransaction"].concat(Array.prototype.slice.call(arguments)));
}

function sendTransaction(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["sendTransaction"].concat(Array.prototype.slice.call(arguments)));
}

function createDelayedTransaction(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["createDelayedTransaction"].concat(Array.prototype.slice.call(arguments)));
}

function getDelayedTransactionHashes(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["getDelayedTransactionHashes"].concat(Array.prototype.slice.call(arguments)));
}

function deleteDelayedTransaction(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["deleteDelayedTransaction"].concat(Array.prototype.slice.call(arguments)));
}

function sendDelayedTransaction(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["sendDelayedTransaction"].concat(Array.prototype.slice.call(arguments)));
}

function sendFusionTransaction(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["sendFusionTransaction"].concat(Array.prototype.slice.call(arguments)));
}

function estimateFusion(id, rpcPassword, params) {
  return buildRPC.apply(undefined, ["estimateFusion"].concat(Array.prototype.slice.call(arguments)));
}